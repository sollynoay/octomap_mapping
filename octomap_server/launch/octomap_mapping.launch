<!-- 
  Example launch file for octomap_server mapping: 
  Listens to incoming PointCloud2 data and incrementally builds an octomap. 
  The data is sent out in different representations. 

  Copy this file into your workspace and adjust as needed, see
  www.ros.org/wiki/octomap_server for details  
-->
<launch>
    <arg name="model" default="/home/robot/catkin_wang/src/vis_lecture/urdf/simple_body1.urdf" />
	<param name="robot_description" command="$(find xacro)/xacro $(arg model)" />
	<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"> 
		<param name="robot_description" value="robot_description"/>
	</node>
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
	<node pkg="octomap_server" type="octomap_server_node" name="octomap_server">
		<param name="resolution" value="0.02" />
		
		<!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
		<param name="frame_id" type="string" value="base_link" />
		
		<!-- maximum range to integrate (speedup!) -->
		<param name="sensor_model/max_range" value="1.3" />
		
		<!-- data source to integrate (PointCloud2) -->
		<remap from="cloud_in" to="/points2" />
	
	</node>
</launch>